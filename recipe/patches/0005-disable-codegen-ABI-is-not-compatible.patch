From bb0fa91a9f91a3d65a9bab27c67757687c0433ac Mon Sep 17 00:00:00 2001
From: "H. Vetinari" <h.vetinari@gmx.com>
Date: Fri, 26 May 2023 21:46:48 +1100
Subject: [PATCH 5/5] disable codegen; ABI is not compatible

---
 src/osqp/interface.py | 45 +++++++------------------------------------
 1 file changed, 7 insertions(+), 38 deletions(-)

diff --git a/src/osqp/interface.py b/src/osqp/interface.py
index 39fc6be..47363cc 100644
--- a/src/osqp/interface.py
+++ b/src/osqp/interface.py
@@ -274,44 +274,13 @@ class OSQP(object):
         """
 
         # Check parameters arguments
-        if parameters == 'vectors':
-            embedded = 1
-        elif parameters == 'matrices':
-            embedded = 2
-        else:
-            raise ValueError("Unknown value of 'parameters' argument.")
-
-        # Set float and long flags
-        if FLOAT:
-            float_flag = 'ON'
-        else:
-            float_flag = 'OFF'
-        if LONG:
-            long_flag = 'ON'
-        else:
-            long_flag = 'OFF'
-
-        # Check project_type argument
-        expectedProject = ('', 'Makefile', 'MinGW Makefiles',
-                           'Unix Makefiles', 'CodeBlocks', 'Xcode')
-        if project_type not in expectedProject:
-            raise ValueError("Unknown value of 'project_type' argument.")
-
-        if project_type == 'Makefile':
-            if system() == 'Windows':
-                project_type = 'MinGW Makefiles'
-            elif system() == 'Linux' or system() == 'Darwin':
-                project_type = 'Unix Makefiles'
-
-        # Convert workspace to Python
-        sys.stdout.write("Getting workspace from OSQP object... \t\t\t\t")
-        sys.stdout.flush()
-        work = self._model._get_workspace()
-        print("[done]")
-
-        # Generate code with codegen module
-        cg.codegen(work, folder, python_ext_name, project_type, compile_python_ext,
-                   embedded, force_rewrite, float_flag, long_flag)
+        warn(
+            "conda-forge builds of osqp are built on shared libraries; "
+            "by the design of osqp, these have a different Application "
+            "Binary Interface (ABI) than those required for codegen, "
+            "and this is therefore not supported."
+        )
+        return
 
     def derivative_iterative_refinement(self, rhs, max_iter=20, tol=1e-12):
         M = self._derivative_cache['M']
